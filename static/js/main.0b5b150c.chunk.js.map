{"version":3,"sources":["components/Charts/BarChart.js","data/index.js","components/Charts/LineChart.js","components/Cards/Cards.js","components/Charts/PieChart.js","components/Table/DataTable.js","components/Charts/Donut.js","components/Map/WorldMap.js","components/Navbar/Home.js","components/Navbar/About.js","components/Navbar/Contact.js","App.js","serviceWorker.js","index.js","components/Table/Table.module.css"],"names":["BarChart","gender","firstRow","result","parseFloat","secondRow","result2","data","labels","datasets","label","backgroundColor","options","legends","display","className","url","fetchData","country","a","changeableUrl","Axios","get","confirmed","recovered","deaths","lastUpdate","fetchCountries","countries","map","name","fetchGender","table","item","DeathRateConfirmedCases","Genre","fetchToday","cases","fetchDailyData","date","reportDate","total","LineChart","state","dailyData","fetchApi","this","setState","lineChart","fill","borderWidth","borderColor","Component","Cards","Card","variant","align","CardContent","Typography","gutterBottom","Date","toDateString","Grid","container","spacing","xs","lg","md","duration","separator","start","end","value","PieChart","props","useState","setCountries","useEffect","fetchAPI","responsive","defaultValue","onChange","e","handleChange","target","i","key","DataTable","stats","TableContainer","component","Paper","style","Table","TableHead","TableCell","id","TableBody","length","TableRow","scope","Donut","critical","WorldMap","mapInfo","Mapping","lat","countryInfo","lng","long","color","height","width","textAlign","borderRadius","bootstrapURLKeys","defaultCenter","defaultZoom","styled","div","App","today","loading","sideMenuOpen","togglerClickHandler","prevState","fetch","then","res","json","data2","classes","makeStyles","theme","drawerPaper","link","textDecoration","palette","text","primary","Drawer","anchor","paper","open","List","to","ListItem","button","ListItemIcon","ListItemText","exact","path","Container","root","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.0b5b150c.chunk.js","sourcesContent":["/* This component contains horizontal bar for the data */\nimport React, { Component } from 'react';\nimport {Bar, Line, Doughnut, Pie, HorizontalBar} from 'react-chartjs-2';\nimport './BarChart.css'\n/*const LineChart = ({data: {confirmed, recovered, deaths, lastUpdate, country}}) => {\n\nconst LineChart =(\n    confirmed?\n      <Line\n         data={{\n             labels: ['Infected','Recovered','Deaths'],\n             labels: [],\n             datasets: [{\n               label: 'People',\n               backgroundColor: ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\n               data : [confirmed.value,recovered.value,deaths.value]\n             }]\n  \n         }}\n         options = {{\n            legends : {display:false},  \n         }}\n      />\n     : null\n  );\n\n  return(\n    <div>\n    {confirmed ? LineChart : null}\n    </div>\n  )\n  }*/\n\n  // make it one pie for males and other for females?\n  const BarChart = ({gender}) => {\n    var firstRow = gender[0]\n    var result = parseFloat(firstRow)\n\n    var secondRow = gender[1]\n    var result2 = parseFloat(secondRow)\n\n\n    const BarChart =(\n      gender[0]?\n          <HorizontalBar\n             data={{\n                 labels: ['Male','Female'],\n                 datasets: [{\n                   label: 'percentage of males and females with confirmed cases',\n                   backgroundColor: ['#A2D0FD','#73B8FD'],\n                   //data : [confirmed.value,recovered.value,deaths.value]\n                   data:[result ,result2]\n                 }]\n      \n             }}\n             options = {{\n                legends : {display:false},  \n             }}\n          />\n         : null\n      );\n    \n      return(\n        <div className=\"bar\">\n        {/*confirmed ? LineChart : null*/}\n        {BarChart}\n        </div>\n      )\n      }\n\nexport default BarChart;","// fetching data here\n/* postman URLs: \nhttps://thevirustracker.com/free-api?global=stats : global stats \nhttps://thevirustracker.com/timeline/map-data.json : country daily stats\nhttps://covid2019-api.herokuapp.com/\n\n*/\nimport Axios from 'axios';\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await Axios.get(changeableUrl);\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await Axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n\n/*export const fetchAge = () => {\n  const ages  = 'https://covid19-server.chrismichael.now.sh/api/v1/FatalityRateByAge'\n  fetch(ages)\n  .then(res => res.json())\n  .then(data => {\n    const {table} = data;\n    table.forEach(e => {\n      const {DeathRateConfirmedCases, Genre} = e\n      return {DeathRateConfirmedCases, Genre};    \n    })\n  })\n}*/\n\nexport const fetchGender = async () => {\n  const url  = 'https://covid19-server.chrismichael.now.sh/api/v1/FatalityRateBySex'\n  try {\n    const { data: { table } } = await Axios.get(url);\n    return table.map((item) => \n    [item.DeathRateConfirmedCases, item.Genre]\n    //item.DeathRateConfirmedCases\n    );\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchToday = async () => {\n  const url = 'https://api.thevirustracker.com/free-api?global=stats'\n  try {\n    const {data: {country, cases}} = await Axios.get(url)\n    return {country, cases};\n  } catch(error) {return error}\n}\n\nexport const fetchDailyData = async() => {\n  const dailyurl = 'https://covid19.mathdro.id/api/daily';\n  try{\n      const {data} = await Axios.get(dailyurl);\n      return data.map(({confirmed, deaths, recovered, reportDate:date}) => ({\n          confirmed: confirmed.total, recovered: recovered.total,\n          deaths: deaths.total, date\n      }));\n   } catch(error) {return error;}\n}\n\n","import React, { Component } from 'react';\nimport {Bar, Line, HorizontalBar} from 'react-chartjs-2'\nimport {fetchDailyData} from '../../data'\n\n\nclass LineChart extends Component {\n  state = {\n    dailyData: {}\n}\n\nasync componentDidMount() {\n    const fetchApi = await fetchDailyData();\n    this.setState({dailyData:fetchApi})\n}\n\n  render() {\n    const lineChart = (\n      this.state.dailyData[0] ? \n      //this.state.dailyData.length != 0 ?\n      <Line \n        data={{ \n            // loop through dailyData\n            labels:this.state.dailyData.map(({date}) => date), \n            datasets: [{\n                data: this.state.dailyData.map(({confirmed}) => confirmed),\n                label: 'infected',\n                fill:false, // fills space below the chart\n                backgroundColor: '#D0E7FE',\n                borderWidth: 1\n            },{\n              data: this.state.dailyData.map(({deaths}) => deaths),\n              label: 'Deaths',\n              borderColor: '#73B8FD',\n              backgroundColor: '#CCG8C8',\n              fill:false\n            }]\n        }} \n      /> : null\n  );\n    return <> {lineChart} </>\n  } \n\n}\n\nexport default LineChart","/* this component has materialUI cards that display the\nnumber of infected people, recovered people, and deaths\n*/\nimport React, { Component } from 'react';\nimport Countup from 'react-countup';\nimport {Grid, Typography, Card, CardContent} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\n    if(!confirmed) {\n        return 'loading'\n    }\n\n\n    return (\n        <Card variant=\"outlined\" align=\"center\"\n        >\n        <CardContent>\n            <Typography variant=\"h5\" gutterBottom>\n                Last update date: {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>\n            <Grid container spacing={1}>\n                <Grid item xs={12}\n                lg={4}\n                md={4}\n                >\n                <h4>Confirmed cases </h4>\n                <Countup duration={3} separator=',' start={0} end={confirmed.value}/>\n                </Grid>\n\n                <Grid item xs={12}\n                lg={4}\n                md={4}\n                >\n                <h4> Recovered cases</h4>\n                <Countup duration={3} separator=',' start={0} end={recovered.value}/>\n                </Grid>\n\n                <Grid item xs={12}\n                lg={4}\n                md={4}\n                >\n                <h4> Deaths </h4>\n                <Countup duration={3} separator=',' start={0} end={deaths.value}/>\n                </Grid>\n            </Grid>\n            </Typography>\n        </CardContent>\n        </Card>\n    )\n}\n\nexport default Cards\n\n\n/*\n\n        <h3>Last update date: {new Date(lastUpdate).toDateString()} </h3>\n        <Grid container spacing={1}>\n            <Grid item xs={4}>\n            <h4>Confirmed cases </h4>\n            <Countup duration={3} separator=',' start={0} end={confirmed.value}/>\n            </Grid>\n\n            <Grid item xs={4}>\n            <h4> Recovered cases</h4>\n            <Countup duration={3} separator=',' start={0} end={recovered.value}/>\n            </Grid>\n\n            <Grid item xs={4}>\n            <h4> Deaths </h4>\n            <Countup duration={3} separator=',' start={0} end={deaths.value}/>\n            </Grid>\n        </Grid>\n    </>*/","/* This component is for displaying the infected/recovered/death cases\n   globally and nationally\n   TODO: make a table instead of options, where I can pick the country and display\n   the results.. \n*/\nimport React, { useState, useEffect } from 'react';\nimport { fetchCountries } from '../../data';\nimport {Pie, Line, Bar, HorizontalBar, Doughnut} from 'react-chartjs-2'; \nimport { TableContainer, TableHead, TableRow, TableCell, Paper, TableBody} from '@material-ui/core';\nimport Cards from '../../components/Cards/Cards'\nimport {Table, FormControl} from 'react-bootstrap';\nimport './PieChart.css'\nimport CountUp from 'react-countup';\n\n// merging data w countries \n// {data: {confirmed, recovered, deaths, lastUpdate}}\nconst PieChart = (props) => {\n    const [countries, setCountries] = useState([]);\n    useEffect(() => {\n      const fetchAPI = async () => {\n        setCountries(await fetchCountries());\n      };  \n      fetchAPI();\n    }, []);\n\n    const data = props.data;\n    const confirmed = data.confirmed;\n    const deaths = data.deaths;\n    const recovered= data.recovered;\n    if(!data || !confirmed || !deaths || !recovered) {\n      return 'loading'\n    }\n\n    const BarChart =(\n          <HorizontalBar\n             data={{\n                 labels: ['confirmed', 'recovered', 'deaths'],\n                 datasets: [{\n                   label: 'People',\n                   backgroundColor: ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\n                   data : [data.confirmed.value, data.recovered.value, data.deaths.value]\n                 }]\n      \n             }}\n             options = {{\n                legends : {display:false},  \n             }}\n          />\n      );\n\n    const PieChart =(\n        <Pie\n           data={{\n               labels: ['confirmed', 'recovered', 'deaths'],\n               datasets: [{\n                 label: 'People',\n                 backgroundColor: ['#2E97FC','#0052A1','#A2D0FD'],\n                 data : [data.confirmed.value, data.recovered.value, data.deaths.value]\n               }]\n           }}\n\n           options = {{\n              legends : {display:false},\n              responsive: true,\n           }}\n        />\n    );\n\n    /*const countryMap= countries.confirmed.map((e) => e)\n    console.log(countryMap)*/\n    return(\n        <div className=\"pie\">\n            {/*<header className=\"Header\" align=\"center\"> \n            confirmed: \n              <CountUp\n              start={0}\n              end={confirmed.value}\n              separator=','\n              duration={3}\n              />\n              <br/>\n\n            Deaths:\n            <CountUp\n              start={0}\n              end={deaths.value}\n              separator=','\n              duration={3}\n            />\n            <br/>\n\n            Recovered:\n            <CountUp\n              start={0}\n              end={recovered.value}\n              separator=','\n              duration={3}\n            />*\n    </header>*/}\n            {PieChart}\n            <select defaultValue=\"\"\n            onChange={(e) => (props.handleChange(e.target.value))}\n            className=\"choose\"\n            align='center'\n            >\n                <option value=\"\"> Choose a country to display statistics </option>\n                {countries.map((country,i) => <option key={i} value={country}>{country}\n                </option>)}\n            </select>\n\n            {/*\n            <TableContainer component={Paper}>\n              <TableHead>\n                <TableRow>\n                <TableCell>Countries</TableCell>\n                <TableCell>Value</TableCell>               </TableRow>\n              </TableHead>\n              <TableBody>\n                  countries.map((country, i) => (\n                    <TableRow key={i} value={country}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {country} \n                      </TableCell>\n                  </TableRow>))\n\n              </TableBody>\n                  </TableContainer>*/}\n\n\n          {/* <Table striped bordered hover variant=\"dark\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>country</th>\n                  <th>confirmed</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {\n                  countries.map((country, i) => (\n                    <tr>\n                      <td key={i} value={country}>\n                        <td>{country}</td>\n                      </td>\n                    </tr>\n                  ))\n                }\n                {\n                  countries.map((country, i) => (\n                    <tr>\n                      <td key={i} value={country}>\n                        <td>{country}</td>\n                      </td>\n                    </tr>\n                  ))\n                }\n              </tbody>\n              </Table>*/}\n        </div>\n    )\n}\nexport default PieChart;","import React, { Component } from 'react';\nimport { TableContainer, Table,TableHead, TableRow, TableCell, Paper, TableBody, SelectField, MenuItem} from '@material-ui/core';\nimport { MDBDataTable } from 'mdbreact';\nimport style from './Table.module.css'\n\nconst DataTable  = ({stats}) => {\n  if(!stats) {\n    return 'loading'\n  }\n/*\n    <div> Table:\n    <Table striped bordered hover variant=\"dark\">\n      <thead>\n        <tr> \n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        { (stats.length > 0)? \n        stats.map((item, i) => {\n          return (\n            <tr key={i}>\n              <td> {item.country} {item.cases}</td>\n            </tr>\n          )\n        }) : <tr><td colSpan=\"5\">Loading..</td></tr> }\n        \n      </tbody>\n      </Table>\n      </div>\n  */\n\n  /* TODO: styles + search */\n  //const row = stats.map(item => <>{console.log(item.cases)}</>) \n  /* \n  const data = {\n    colomns: [\n      {\n        label:'Country',\n        field: 'country',\n        sort: 'asc',\n        width: 150\n      },{\n        label:'Confirmed cases',\n        field: 'confirmed',\n        sort: 'asc',\n        width:150\n      }\n    ],\n    rows: [\n      {\n        country: stats.map((item) => (<>{item.country}</>)),\n        //confirmed: this.stats.map(item) => {item.cases}\n      }\n\n    ]\n  }*/\n\n  return(\n      <TableContainer component={Paper} className={style.container}>\n      <Table>\n        <TableHead>\n          <TableCell className={style.id}> Country </TableCell>\n          <TableCell className={style.id}> Confirmed</TableCell>\n          <TableCell className={style.id}> Deaths </TableCell>\n          <TableCell className={style.id}> Recovered </TableCell>\n        </TableHead>\n        <TableBody>\n          { (stats.length > 0)? \n            stats.map((item, i) => (\n              <TableRow key= {item.country}  className={style.cases}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {item.country}\n                </TableCell>\n                <TableCell>{item.cases}</TableCell>\n                <TableCell>{item.deaths}</TableCell>\n                <TableCell>{item.recovered}</TableCell>\n            </TableRow>)) : null}\n        </TableBody>\n      </Table>\n      </TableContainer>\n  )\n}\nexport default DataTable;\n","import React, { Component } from 'react';\nimport {Doughnut} from 'react-chartjs-2'\nimport './Donut.css'\n\nconst Donut = ({stats}) => {\nif(!stats || !stats[0]) {\n    return 'loading'\n}\nconst data = stats[0];\nconst Donut =(\n    <Doughnut\n       data={{\n           labels: ['Confirmed cases', 'Critical cases', 'Deaths', 'Recovered'],\n           datasets: [{\n             label: 'number of people infected',\n             backgroundColor: ['#D0E7FE','#A2D0FD','#73B8FD','#2E97FC' ],\n             data: [data.cases, data.critical, data.deaths, data.recovered]\n        }]\n\n       }}\n       options = {{\n          legends : {display:false},  \n       }}\n    />\n);\n\n    return (<div className=\"doughnut\">\n        {/*<h2> Global totals \n            <br/>\n            <br/>\n        </h2>*/}\n        {Donut}\n        </div>\n        )\n}\n\nexport default Donut;","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport Countup from 'react-countup'\n\n//const AnyReactComponent = ({ text }) => <div>{text}</div>;\nconst WorldMap  = ({mapInfo}) => {\n    if(!mapInfo) {\n        return 'loading'\n    }\n\n    // Lat & Lon & Country\n    const Mapping = mapInfo.map((item, i) => {\n      return(\n          <div\n            lat={item.countryInfo.lat}\n            lng={item.countryInfo.long}\n            style = {{\n                color:'white',\n                backgroundColor: 'blue',\n                height:'25px',\n                width:'35px',\n                textAlign: 'center',\n                borderRadius:\"50%\"\n            }}>\n\n              <h5><br/>\n                <Countup\n                start={item.cases}\n                end={item.cases}\n                separator=','\n                /></h5>\n          </div>)})\n\n    return (\n        <div style={{ height: '100vh', width: '100%' }}>\n        <GoogleMapReact\n        bootstrapURLKeys={{ key: 'AIzaSyDmUbRo3tmxCw-EK5n3ov72EzOI1VH-FzI'}}\n        defaultCenter={{\n            lat: 59.95,\n            lng: 30.33  \n        }}\n            defaultZoom={4.5}\n            >\n            {Mapping}\n        </GoogleMapReact>\n        </div>\n        )\n}\n\nexport default WorldMap","import React, { Component } from 'react';\nimport styled from 'styled-components';\nconst GridWrapper = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  margin-top: 1em;\n  margin-left: 6em;\n  margin-right: 6em;\n  grid-template-columns: repeat(12, 1fr);\n  grid-auto-rows: minmax(25px, auto);\n`;\nconst Home = () => {\n    return (\n        <div>\n          <GridWrapper>\n            <h3>This is Home Page</h3>\n          </GridWrapper>\n        </div>\n    );\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst GridWrapper = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  margin-top: 1em;\n  margin-left: 6em;\n  margin-right: 6em;\n  grid-template-columns: repeat(12, 1fr);\n  grid-auto-rows: minmax(25px, auto);\n`; \n\nconst About = () => {\n    return (\n        <GridWrapper>\n          <h3>About page</h3>\n        </GridWrapper>\n    );\n  \n}\n\nexport default About;","import React, { Component } from 'react';\n\nclass Contact extends Component {\n  render() {\n    return (\n        <div>\n          <h2>Contact</h2>\n        </div>\n    );\n  }\n}\n\nexport default Contact;","import React, {Component} from 'react';\nimport './App.css';\nimport {Home, About, Contact,\n  Cards, PieChart, BarChart, LineChart,Today, SideMenu,\n  DataTable, Donut, NavbarMenu, WorldMap} from './components'\nimport {fetchData, fetchGender, fetchToday, fetchStats, cardsData, tableData, fetchDailyData} from './data/'\nimport {Grid, Paper, TableCell, Drawer, List, ListItem, ListItemIcon, ListItemText,\nContainer, Typography} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { black } from 'color-name';\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport RoomIcon from '@material-ui/icons/Room';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nclass App extends Component {\n  state = {\n    data: {},\n    country:'',\n    gender: {},\n    today:{},\n\n    loading: false,\n    stats:[], \n\n    mapInfo: [],\n    dailyData:{},\n    sideMenuOpen: false\n  }\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({data});\n\n    const gender = await fetchGender();\n    this.setState({gender});\n\n    const casesToday = await fetchToday();\n    //const today = casesToday.results[0].total_new_cases_today;\n    //this.setState({today:today})\n    const url = 'https://coronavirus-19-api.herokuapp.com/countries'\n    this.setState({loading:true})\n    fetch(url)\n    .then(res => res.json())\n    .then(data => {\n      this.setState({stats:data, loading:false})\n    })\n\n    //const url2 = 'https://api.covid19api.com/all'\n    const url2 = 'https://corona.lmao.ninja/v2/countries'\n    fetch(url2)\n    .then(res => res.json())\n    .then(data2 => {\n      this.setState({mapInfo:data2})\n    })\n\n    /* daily data\n    const daily = await fetchDailyData();\n    this.setState({dailyData: daily})*/\n  }\n\n    // change the state of the country [chosen from options]\n    handleChange = async(country) => {\n    const data = await fetchData(country);\n    this.setState({data, country: country});\n\n    //const all = {data, country: country};\n    //return all;\n  }\n\n\n  // menu handler\n  togglerClickHandler = () => {\n    this.setState((prevState) => {\n      return {sideMenuOpen: !prevState.sideMenuOpen}\n    });\n  }\n\n  render() {\n    const {data, country, gender, today, stats, mapInfo} = this.state;\n    const classes = makeStyles((theme) => ({\n      drawerPaper: {width: 'inherit'},\n      link: {\n        textDecoration: 'none', \n        color: theme.palette.text.primary\n      }\n    }));\n\n  return (\n    <Router>\n      <div style={{display: 'flex'}}>\n        <Drawer\n        style={{width: '130px'}}\n        variant=\"persistent\" // always going to be there\n        anchor=\"left\"\n        classes={{paper: classes.drawerPaper}}\n        open={true}\n        >\n          <List>\n            <Link to=\"/\" className={classes.link} style={{ textDecoration: 'none' ,\n                  color: 'black',\n          }}>\n              <ListItem button>\n              <ListItemIcon>\n                    <HomeIcon />\n              </ListItemIcon>\n                <ListItemText primary={\"Home\"}>\n                </ListItemText>\n              </ListItem>\n            </Link>\n\n            <Link to=\"/Map\" className={classes.link} style={{ textDecoration: 'none' ,\n                  color: 'black'\n          }}>\n              <ListItem button>\n              <ListItemIcon>\n                    <RoomIcon />\n              </ListItemIcon>\n                <ListItemText primary={\"Map\"}>\n                </ListItemText>\n              </ListItem>\n            </Link>\n\n            <Link to=\"/Table\" className={classes.link} style={{ textDecoration: 'none' ,\n                  color: 'black'\n          }}>\n              <ListItem button>\n              <ListItemIcon>\n                    <TableChartIcon />\n              </ListItemIcon>\n\n                <ListItemText primary={\"Table\"}>\n                </ListItemText>\n              </ListItem>\n            </Link>\n          </List>\n        </Drawer>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Container>\n              <Typography variant=\"h5\" gutterBottom>\n                <Cards data={data}/>\n              </Typography>\n              <Typography variant=\"body1\" gutterBottom>\n              <div className={classes.root}>\n              <Grid container spacing={1}>\n\n                <Grid item xs={12} lg={6} md={6}>\n                    <Paper className={classes.paper}><PieChart handleChange={this.handleChange} data={data}/></Paper>\n                </Grid>\n\n                <Grid item xs={12} lg={6} md={6}>\n                  <Paper className={classes.paper}> <Donut stats={stats}/> </Paper>\n                </Grid>\n\n                <Grid item xs ={12} lg={6} md={6}>\n                  <Paper className={classes.paper}><BarChart gender={gender}/></Paper></Grid>\n                <Grid item xs={12} lg={6} md={6}>\n                  <Paper className={classes.paper}><LineChart gender={gender}/></Paper></Grid>\n                </Grid>\n                </div>\n              </Typography>\n            </Container>\n          </Route>\n\n          <Route exact path=\"/Map\">\n            <Container>\n              <Typography variant=\"h3\" gutterBottom>\n              </Typography>\n              <Typography variant=\"body1\" gutterBottom>\n              <Grid container spacing={1}>\n              <Grid item xs={12}><Paper className={classes.paper}><WorldMap mapInfo={mapInfo}/></Paper> </Grid>\n              </Grid>\n              </Typography>\n          </Container>\n          </Route>\n\n          <Route exact path=\"/Table\">\n            <Container variant=\"h3 gutterBottom\">\n              <Typography variant=\"body1\" gutterBottom>\n                <Grid item xs={12}><Paper className={classes.paper}><DataTable stats={stats}/></Paper></Grid>\n              </Typography>\n            </Container>\n          </Route>\n        </Switch>\n      </div>\n\n\n    {/*<div className={classes.root}>\n      <Grid container spacing={1}>\n\n        <Grid item xs={3}>\n            <Paper className={classes.paper}><PieChart handleChange={this.handleChange} data={data}/></Paper>\n        </Grid>\n        \n        <Grid item xs={3}>\n          <Paper className={classes.paper}> <Donut stats={stats}/> </Paper>\n        </Grid>\n\n        <Grid item xs ={6}>\n          <Paper className={classes.paper}><BarChart gender={gender}/></Paper></Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}><LineChart gender={gender}/></Paper></Grid>\n\n        <Grid item xs={6}><Paper className={classes.paper}><WorldMap mapInfo={mapInfo}/></Paper> </Grid>\n        <Grid item xs={12}><Paper className={classes.paper}><DataTable stats={stats}/></Paper></Grid>\n\n      </Grid> */}\n\n\n      {/*BarChart gender={gender}/>\n      <PieChart handleChange={this.handleChange} data={data}/>\n      <LineChart gender={gender}/>\n      <WorldMap mapInfo={mapInfo}/>\n      <DataTable stats={stats}/>\n      <Grid container spacing={3}>\n      <Grid item xs={12} sm={6}> </Grid>\n      <Grid item xs={12} sm={6}>  </Grid>\n      <Grid item xs={12} sm={6}>  </Grid>*/}\n\n      \n      {/* ****************ADD STYLES*************** *\n      </div><Grid container spacing={3}>*/}\n        {/*<Grid item xs={12}>\n          <Paper>\n            <Cards data={data}/>\n          </Paper>\n        </Grid>*\n\n        <Grid item xs={12} sm={6}>\n            <PieChart handleChange={this.handleChange} data={data}/>\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <Paper>\n            <LineChart gender={gender}/>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n        <WorldMap mapInfo={mapInfo}/>\n        </Grid>\n  </Grid>*/}\n  {/*\n  <Donut stats={stats}/>\n    <LineChart/>\n        <WorldMap mapInfo={mapInfo}/>\n            <DataTable stats={stats}/>\n            this method didn't work\n  <Router>\n    {/*<NavbarMenu/>*\n    <SideMenu/>\n  </Router>\n      <Grid container direction={'column'} spacing={24}>\n    <Router>\n    <SideMenu/>\n    </Router>\n    </Grid>\n    \n    </div>*/}\n\n</Router>\n\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Table_container__1u_GE\",\"cases\":\"Table_cases__3Jr_F\",\"id\":\"Table_id__12P5q\"};"],"sourceRoot":""}